
//Collection -1


{
	"info": {
		"_postman_id": "9f59b550-03a3-47e4-a45d-da20806e4716",
		"name": "TODO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "register user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2ce3d81d-7848-4055-8d49-6b00bcf90b27",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"userEmail\", \"martin.shultz\"+ new Date().getTime() + \"@test.com\");",
							"pm.environment.set(\"userPassword\", \"ab47sr6c8x9znz\");",
							"",
							"pm.test(\"Status\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"",
							"pm.test(\"Fail is false\", () => {",
							"    pm.expect(jsonData.fail).to.eql(false);",
							"}); ",
							"",
							"pm.test(\"Message is string\", () => {",
							"    pm.expect(jsonData.message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Returns 24 char alphanumeric id\", () => {pm.expect(jsonData.payload).to.match(/^[a-z0-Z]{24}$/); ",
							"});",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c53d4b2f-3188-4084-835d-56cffd92c48a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"email\": \"{{userEmail}}\",\n\"password\": \"{{userPassword}}\",\n\"name\": \"Bob Samuel\",\n\"phone\": \"012345678902\"\n}\n\n\n"
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "user login ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "70a11c68-d201-4fe8-972b-f1f292c4793a",
						"exec": [
							"",
							"",
							"pm.environment.set(\"token\", jsonData.payload.token);",
							"",
							"pm.environment.set(\"userId\", jsonData.payload.user._id);",
							"",
							"/*const jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Status\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"",
							"",
							"pm.test(\"Message is string\", () => {",
							"    pm.expect(jsonData.message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"*/",
							"",
							"â€‹",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b41045a3-193c-4e76-8989-9743cfa36ece",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\n\"email\": \"{{userEmail}}\",\n\"password\": \"{{userPassword}}\"\n\n}"
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "validate token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25ba41ba-760a-48b5-b0ed-cf421a6fd90d",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"",
							"",
							"pm.test(\"Message is string\", () => {",
							"    pm.expect(jsonData.message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/user/token",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23b0cf6f-43f9-4cbb-82cf-8dc762cffbd0",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"",
							"",
							"pm.test(\"Message is string\", () => {",
							"    pm.expect(jsonData.message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/user",
					"host": [
						"{{host}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "get by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bb410d7a-5778-45a3-96fa-b9785a465306",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"",
							"",
							"pm.test(\"Message is string\", () => {",
							"    pm.expect(jsonData.message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/user/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b97f70a5-9c46-4c26-8510-7d5be7897b77",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"",
							"",
							"pm.test(\"Message is string\", () => {",
							"    pm.expect(jsonData.message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"email\": \"{{userEmail}}\",\n\"password\": \"{{userPassword}}\",\n\"name\": \"Bob Samuel\",\n\"phone\": \"012345678902\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41c4fb70-0423-49fd-ad31-ddc4d3250ae5",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"",
							"pm.test(\"Message is string\", () => {",
							"    pm.expect(jsonData.message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/user/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "create Group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "24315dd7-9104-45a6-8b78-3676792217fb",
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"PavelGroupLLC\",\n    \"accessType\": \"all\",\n    \"description\": \"Postman\",\n    \"owner\": \"5d44e070278c0d00047d2884\"\n}"
				},
				"url": {
					"raw": "{{host}}/group",
					"host": [
						"{{host}}"
					],
					"path": [
						"group"
					]
				}
			},
			"response": []
		},
		{
			"name": "getall Gropus",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/group",
					"host": [
						"{{host}}"
					],
					"path": [
						"group"
					]
				}
			},
			"response": []
		},
		{
			"name": "getById",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/group/{{groupId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"group",
						"{{groupId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateById",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"PavelGroupINC\",\n    \"accessType\": \"all\",\n    \"description\": \"PostmanXXX\",\n    \"owner\": \"5d44e070278c0d00047d2884\"\n}"
				},
				"url": {
					"raw": "{{host}}/group/{{groupId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"group",
						"{{groupId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "eventCreate",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"MartinShulthzLLC\",\n    \"accessType\": \"all\",\n    \"description\": \"Postman\",\n    \"location\": \"USA\",\n    \"owner\": \"5d44e070278c0d00047d2884\"\n}"
				},
				"url": {
					"raw": "{{host}}/event/create",
					"host": [
						"{{host}}"
					],
					"path": [
						"event",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "eventGetAll",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Authorization",
						"value": "{{eventId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/event",
					"host": [
						"{{host}}"
					],
					"path": [
						"event"
					]
				}
			},
			"response": []
		},
		{
			"name": "eventGetByID",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{eventId}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/event/{{eventId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"event",
						"{{eventId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "eventUpdate",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{eventId}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"PavelGroupINC\",\n    \"accessType\": \"all-USA\",\n    \"description\": \"Postman\",\n    \"location\": \"USA\",\n    \"owner\": \"5d44e070278c0d00047d2884\"\n}"
				},
				"url": {
					"raw": "{{host}}/event/{{eventId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"event",
						"{{eventId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "eventUpdate Copy",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{eventId}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/event/{{eventId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"event",
						"{{eventId}}"
					]
				}
			},
			"response": []
		}
	]
}