{
	"info": {
		"_postman_id": "3a26084f-2f89-432b-af19-d0dea7bd5908",
		"name": "USER [ADMIN]",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0fcafb63-e010-4297-a093-c563a822016c",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"userEmail\", \"martin.shultz\"+ new Date().getTime() + \"@test.com\");",
							"pm.environment.set(\"userPassword\", \"ab47sr6c8x9znz\");",
							"​",
							"pm.test(\"Status is correct\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"​",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"​",
							"pm.test(\"Fail is false\", () => {",
							"    pm.expect(jsonData.fail).to.equal(false);",
							"});",
							"​",
							"let respTime = pm.response.responseTime;",
							"​",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(respTime).to.be.below(5000);",
							"}); ",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "562991e7-9b78-42a4-ada4-fda5dccbb114",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"about\": \"qwe qwe qwe qwe\",\n\"email\": \"{{userEmail}}\",\n\"englishLevel\": \"Beginner\",\n\"goals\": \"qweqw qwe qwe qwe\",\n\"name\": \"Bob Smith\",\n\"password\": \"{{userPassword}}+1\",\t\n\"phone\": \"+153456786654\"\n}"
				},
				"url": {
					"raw": "{{host}}/user",
					"host": [
						"{{host}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31a4f0c0-66e4-485e-a169-3f1225c79ceb",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"token\",jsonData.token);",
							"",
							"pm.environment.set(\"userId\",jsonData.userId);",
							"​",
							"pm.test(\"Status is correct\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"​",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"​",
							"pm.test(\"Fail is false\", () => {",
							"    pm.expect(jsonData.fail).to.eql(false);",
							"});",
							"​",
							"let respTime = pm.response.responseTime;",
							"​",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(respTime).to.be.below(5000);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4d72e13e-4805-425c-81bf-8d0f63829cc1",
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"email\": \"{{userEmail}}\",\n\"password\": \"{{userPassword}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password Reset Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "98f558db-e0f5-4065-b7d9-d0db1e6ad691",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"email\": \"{{userEmail}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/password/reset/request",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"password",
						"reset",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetHash",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "59d4fab5-1347-4829-b7e3-b7319bcffe8d",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.environment.set(\"hash\", jsonData.hash);",
							"",
							"let responseTime = pm.response.responseTime;",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(responseTime).to.be.below(5000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"email\": \"{{userEmail}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/hash/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"hash",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Hash Valid ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf579a5c-760a-44e8-8352-fa2e927a0fd3",
						"exec": [
							"const jsonData = pm.response.json();",
							"​",
							"pm.test(\"Status is correct\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"​",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"​",
							"/*pm.test(\"Fail is false\", () => {",
							"    pm.expect(jsonData.fail).to.eql(false);",
							"});*/",
							"​",
							"let respTime = pm.response.responseTime;",
							"​",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(respTime).to.be.below(5000);",
							"});",
							"Collapse",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"hash\": \"{{hash}}\", \n\"userId\": \"{{userId}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/password/reset/valid",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"password",
						"reset",
						"valid"
					]
				}
			},
			"response": []
		},
		{
			"name": "New password set",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "626823f7-b20c-440e-8280-ae027726d571",
						"exec": [
							"const jsonData = pm.response.json();",
							"​",
							"pm.test(\"Status is correct\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"​",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"​",
							"/*pm.test(\"Fail is false\", () => {",
							"    pm.expect(jsonData.fail).to.eql(false);",
							"});*/",
							"​",
							"let respTime = pm.response.responseTime;",
							"​",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(respTime).to.be.below(5000);",
							"});",
							"Collapse",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"hash\":\"{{hash}}\",\n\"userId\":\"{{userId}}\",\n\"password\":\"123456\"\n}\n\n"
				},
				"url": {
					"raw": "{{host}}/user/password/reset/new",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"password",
						"reset",
						"new"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAll",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "26af1934-2df5-43ef-aa03-de2aba17fa8f",
						"exec": [
							"const jsonData = pm.response.json();",
							"​",
							"pm.test(\"Status is correct\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"​",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"​",
							"/*pm.test(\"Fail is false\", () => {",
							"    pm.expect(jsonData.fail).to.eql(false);",
							"});*/",
							"​",
							"let respTime = pm.response.responseTime;",
							"​",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(respTime).to.be.below(5000);",
							"});",
							"Collapse",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/user?",
					"host": [
						"{{host}}"
					],
					"path": [
						"user"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetById",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "501c7c54-b29c-4ed3-8bd1-ea85f9647cda",
						"exec": [
							"const jsonData = pm.response.json();",
							"​",
							"pm.test(\"Status is correct\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"​",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"​",
							"/*pm.test(\"Fail is false\", () => {",
							"    pm.expect(jsonData.fail).to.eql(false);",
							"});*/",
							"​",
							"let respTime = pm.response.responseTime;",
							"​",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(respTime).to.be.below(5000);",
							"});",
							"Collapse",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/user/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateSelf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73a1a26a-f45e-4316-a2a7-bf0dfb32659f",
						"exec": [
							"const jsonData = pm.response.json();",
							"​",
							"pm.test(\"Status is correct\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"​",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"​",
							"/*pm.test(\"Fail is false\", () => {",
							"    pm.expect(jsonData.fail).to.eql(false);",
							"});*/",
							"​",
							"let respTime = pm.response.responseTime;",
							"​",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(respTime).to.be.below(5000);",
							"});",
							"Collapse",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"goals\": \"should be set later\"\n}"
				},
				"url": {
					"raw": "{{host}}/user",
					"host": [
						"{{host}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateById",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9e4831b-d190-4d81-9781-8ee3680848ed",
						"exec": [
							"const jsonData = pm.response.json();",
							"​",
							"pm.test(\"Status is correct\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"​",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"​",
							"/*pm.test(\"Fail is false\", () => {",
							"    pm.expect(jsonData.fail).to.eql(false);",
							"});*/",
							"​",
							"let respTime = pm.response.responseTime;",
							"​",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(respTime).to.be.below(5000);",
							"});",
							"Collapse",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"about\": \"palning on release tomorrow\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteById",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "{{host}}/user/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8f772cc3-e9d8-44cd-8e9b-f8a6bde826cc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c4503d64-5c89-47aa-9b04-95240dd40ea4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}